openapi: 3.1.0
info:
  title: Ankorstore Internal API v1
  version: '1.0'
  summary: API specification to consume by internal Ankorstore client
  description: Internal Ankorstore API specification
  license:
    url: 'https://creativecommons.org/publicdomain/zero/1.0/'
    name: CC0 1.0 Universal
  contact:
    name: Ankorstore
    url: 'https://www.ankorstore.com'
    email: api@ankorstore.com
servers:
  - url: 'http://ankorlocal.com:8000'
    description: Local Development Server
  - url: 'https://www.preprod.ankorstore.com'
    description: Staging Environment
  - url: 'https://www.ankorstore.com'
    description: Production Environment
tags:
  - name: Applications
  - name: Brand Performance Metrics
  - name: Brands
  - name: Bulk Operations
  - name: Business event brand discounts
  - name: Candidate Brand
  - name: Cart
  - name: Catalog Export
  - name: Catalog Integration
  - name: Categories
  - name: Fulfillment
  - name: Invoicing
  - name: Mobile
  - name: Offer Programme
  - name: Ordering
  - name: Platform
  - name: Product Prices
  - name: Public Integrations
  - name: Retailer
  - name: Rutter
  - name: Segments
  - name: Shipping
  - name: Testimonials
  - name: Touch Points
  - name: Webhook Subscriptions
paths:
  '/api/internal/v1/applications':
    get:
      summary: List Applications
      $ref: './applications/index.yaml#/get'
      tags:
        - Applications
    post:
      summary: Create Application
      $ref: './applications/index.yaml#/post'
      tags:
        - Applications

  '/api/internal/v1/applications/{applicationId}':
    patch:
      summary: Update Application
      $ref: './applications/item.yaml#/patch'
      tags:
        - Applications
    delete:
      summary: Delete Application
      $ref: './applications/item.yaml#/delete'
      tags:
        - Applications

  '/api/internal/v1/applications/{applicationId}/regenerate-secret':
    post:
      summary: Regenerate Application credentials
      $ref: './applications/item-regenerate-secret.yaml#/post'
      tags:
        - Applications

  '/api/internal/v1/brands/{brandId}':
    get:
      summary: Get Brand details
      $ref: ./brands/item.yaml#/get
      tags:
        - Brands
    patch:
      summary: Update Brand details
      $ref: ./brands/item.yaml#/patch
      tags:
        - Brands

  '/api/internal/v1/brands/company/{companyId}':
    get:
      summary: Get Brand's company
      $ref: ./brands/company/item.yaml#/get
      tags:
        - Brands
    patch:
      summary: Update Brand's company
      $ref: ./brands/company/item.yaml#/patch
      tags:
        - Brands

  '/api/internal/v1/brands/shipping-settings/{shippingSettingsId}':
    get:
      summary: Get Brand's shipping settings
      $ref: ./brands/shipping-settings/item.yaml#/get
      tags:
        - Brands
    patch:
      summary: Update Brand's shipping settings
      $ref: ./brands/shipping-settings/item.yaml#/patch
      tags:
        - Brands

  '/api/internal/v1/cart/item-counter/{itemCounterId}':
    get:
      summary: Get counters about cart items
      $ref: './cart/item-counter/item.yaml#/get'
      tags:
        - Cart

  '/api/internal/v1/cart/summary/{cartSummaryId}':
    get:
      summary: Get cart summary
      $ref: './cart/cart-summary/item.yaml#/get'
      tags:
        - Cart

  '/api/internal/v1/cart/carts':
    get:
      $ref: ./cart/index.yaml#/get

  '/api/internal/v1/cart/carts/{id}':
    get:
      $ref: ./cart/item.yaml#/get
    patch:
      $ref: ./cart/item.yaml#/patch

  '/api/internal/v1/cart/purchasing-lists/{purchasingListId}':
    get:
      summary: Get Retailer's purchasing list
      $ref: ./cart/purchasing-lists/item.yaml#/get
      tags:
        - Cart

  '/api/internal/v1/webhook-subscriptions':
    post:
      summary: Add Webhook Subscription to Application
      $ref: './webhook-subscriptions/index.yaml#/post'
      tags:
        - Webhook Subscriptions

  '/api/internal/v1/webhook-subscriptions/{webhookSubscriptionId}':
    patch:
      summary: Update Application Webhook Subscription
      $ref: './webhook-subscriptions/item.yaml#/patch'
      tags:
        - Webhook Subscriptions
    delete:
      summary: Delete Application Webhook Subscription
      $ref: './webhook-subscriptions/item.yaml#/delete'
      tags:
        - Webhook Subscriptions

  '/api/internal/v1/webhook-subscriptions/events':
    get:
      summary: Get Webhook Subscription Events
      $ref: './webhook-subscriptions/item-events.yaml#/get'
      tags:
        - Webhook Subscriptions

  '/api/internal/v1/rutter-integrations':
    get:
      summary: List Rutter Integrations
      $ref: './rutter/index.yaml#/get'
      tags:
        - Rutter
    post:
      summary: Create Rutter Integration
      $ref: './rutter/index.yaml#/post'
      tags:
        - Rutter

  '/api/internal/v1/rutter-integrations/{id}':
    patch:
      summary: Update Rutter Integration
      $ref: './rutter/item.yaml#/patch'
      tags:
        - Rutter
    delete:
      summary: Delete Rutter integration
      $ref: './rutter/item.yaml#/delete'
      tags:
        - Rutter

  '/api/internal/v1/rutter-integrations/store-shopify':
    post:
      summary: Create a Shopify integration
      $ref: './rutter/store-shopify.yaml#/post'
      tags:
        - Rutter

  '/api/internal/v1/public-integrations/platform-verifications':
    post:
      $ref: './public-integrations/platform-verification/item.yaml#/post'

  '/api/mobile/v1/search/brands/{brandId}/products':
    get:
      summary: Search for products related to a given brand
      $ref: './mobile/search-brand-item-products.yaml#/get'
      tags:
        - Mobile

  '/api/mobile/v1/search/products':
    get:
      summary: Search for products by query
      $ref: './mobile/search-products.yaml#/get'
      tags:
        - Mobile

  "/api/internal/v1/product-variants/{productVariantUuid}/declare-fulfillment-item":
    post:
      summary: Declare product variant as fulfillment item
      $ref: "./product-variants/declare-fulfillment-item/index.yaml#/post"
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/orders':
    $ref: './fulfillment/orders/index.yaml'

  '/api/internal/v1/fulfillment/orders/{id}':
    $ref: './fulfillment/orders/item.yaml'

  '/api/internal/v1/fulfillment/replenishments':
    get:
      summary: List Brand Replenishments
      $ref: './fulfillment/replenishments/index.yaml#/get'
      tags:
        - Fulfillment
    post:
      summary: Create Replenishment
      $ref: './fulfillment/replenishments/index.yaml#/post'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/replenishments/{id}':
    get:
      summary: Get Replenishment
      $ref: './fulfillment/replenishments/item.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/replenishments/{id}/quantity-adjustments':
    get:
      summary: Returns quantity adjustments for a replenishment
      $ref: './fulfillment/replenishments/quantity-adjustments.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/replenishments/{id}/relationships/quantity-adjustments':
    get:
      summary: Returns quantity adjustments relationships
      $ref: './fulfillment/replenishments/relationships-quantity-adjustments.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/warehouses':
    get:
      summary: List Fulfillment Warehouses
      $ref: './fulfillment/warehouses/index.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/warehouses/{id}':
    get:
      summary: Details of a single warehouse
      $ref: './fulfillment/warehouses/item.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/items':
    get:
      summary: Returns list of items being prepared or available for fulfillment for the current authenticated Brand
      $ref: './fulfillment/items/index.yaml#/get'
      tags:
        - Fulfillment
    post:
      summary: Create an fulfillment item
      $ref: './fulfillment/items/index.yaml#/post'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/items/{id}':
    get:
      summary: Get Fulfillment Item
      $ref: './fulfillment/items/item.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/items/{id}/quantity-adjustments':
    get:
      summary: Returns quantity adjustments
      $ref: './fulfillment/items/quantity-adjustments.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/items/{id}/relationships/quantity-adjustments':
    get:
      summary: Returns quantity adjustments
      $ref: './fulfillment/items/relationships-quantity-adjustments.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/fulfillable':
    get:
      summary: Returns availability information with the fulfillable UUIDs given
      $ref: './fulfillment/fulfillables/index.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/fulfillment-brands/{id}':
    get:
      summary: Get Fulfillment Brand
      $ref: './fulfillment/brands/item.yaml#/get'
      tags:
        - Fulfillment

  '/api/internal/v1/fulfillment/fulfillment-brands':
    post:
      summary: Create a Fulfillment Brand
      $ref: './fulfillment/brands/index.yaml#/post'
      tags:
        - Fulfillment

  '/api/internal/v1/ordering/non-ankorstore-fulfillment-orders':
    post:
      $ref: './ordering/external-orders/index.yaml#/post'
      summary: Create Non-Ankorstore Fulfillment Order
      tags:
        - Ordering

  '/api/internal/v1/ordering/orders':
    get:
      $ref: './ordering/orders/orders.yaml#/get'
      summary: List master orders for the current authenticated Brand
      tags:
        - Ordering

  '/api/internal/v1/ordering/orders/{id}':
    get:
      $ref: './ordering/orders/order.yaml#/get'
      summary: Get Master Order
      tags:
        - Ordering
    parameters:
      - $ref: '#/components/parameters/uuidInPath'

  '/api/internal/v1/ordering/orders/-actions/export-orders':
    get:
      $ref: './ordering/orders/export-orders.yaml#/get'
      summary: Export Orders
      tags:
        - Ordering

  '/api/internal/v1/ordering/orders/{id}/order-items':
    get:
      $ref: './ordering/orders/order-items.yaml#/get'
      summary: List Order Items of the given master order
      tags:
        - Ordering
    parameters:
      - $ref: '#/components/parameters/uuidInPath'

  '/api/internal/v1/invoicing/service-invoices':
    get:
      summary: List Brand Service Invoices
      $ref: './invoicing/service-invoices/index.yaml#/get'
      tags:
        - Invoicing

  '/api/internal/v1/invoicing/payment-service-provider-customers':
    post:
      summary: Create a Payment Service Provider Customer with a SEPA setup intent
      $ref: './invoicing/payment-service-provider-customers/index.yaml#/post'
      tags:
        - Invoicing

  '/api/internal/v1/invoicing/payment-service-provider-customers/{aksCustomerId}':
    get:
      summary: Get Payment Service Provider Customer
      $ref: './invoicing/payment-service-provider-customers/item.yaml#/get'
      tags:
        - Invoicing
    patch:
      summary: Update the customer's mandate_status
      $ref: './invoicing/payment-service-provider-customers/index.yaml#/patch'
      tags:
        - Invoicing

  '/api/internal/v1/invoicing/setup-intents/{id}':
    get:
      summary: Get Payment Service Provider SetupIntent
      $ref: './invoicing/setup-intents/item.yaml#/get'
      tags:
        - Invoicing

  '/api/internal/v1/invoicing/setup-intents':
    post:
      summary: Create A Payment Service Provider SetupIntent
      $ref: './invoicing/setup-intents/item.yaml#/post'
      tags:
        - Invoicing

  '/api/internal/v1/retailer/email-signup':
    post:
      summary: Retailer Email Signup
      $ref: './retailer/email-signup.yaml#/post'
      tags:
        - Retailer

  '/api/internal/v1/candidate-brands/{candidateBrandId}':
    get:
      summary: Get Candidate Brand
      $ref: './candidate-brands/item.yaml#/get'
      tags:
        - Candidate Brand

  '/api/internal/v1/rutter-integrations/send-test-order':
    post:
      summary: Create a test order on the integrated platform
      $ref: './rutter/send-test-order.yaml#/post'
      tags:
        - Rutter

  '/api/internal/v1/catalog-integration/product-spreadsheet-mappings':
    post:
      summary: Create a new product spreadsheet mapping
      $ref: './catalog-integration/product-spreadsheet-mappings/index.yaml#/post'
      tags:
        - Catalog Integration
    get:
      summary: Returns list of product spreadsheet mappings
      $ref: './catalog-integration/product-spreadsheet-mappings/index.yaml#/get'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/product-spreadsheet-mappings/{productSpreadsheetMappingId}':
    get:
      summary: Get product spreadsheet mapping
      $ref: './catalog-integration/product-spreadsheet-mappings/item.yaml#/get'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/product-integration-batches/google-batches':
    post:
      summary: Create a new import batch with a google spreadsheet
      $ref: './catalog-integration/product-integration-batches/google-batches.yaml#/post'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/product-integration-batches/csv-batches':
    post:
      summary: Create a new import batch with a csv spreadsheet
      $ref: './catalog-integration/product-integration-batches/csv-batches.yaml#/post'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/product-integration-batches/xlsx-batches':
    post:
      summary: Create a new import batch with a xlsx spreadsheet
      $ref: './catalog-integration/product-integration-batches/xlsx-batches.yaml#/post'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations':
    get:
      summary: Returns list of Integrations for the current authenticated Brand
      $ref: './catalog-integration/integrations/index.yaml#/get'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/{catalogIntegrationId}':
    get:
      summary: Get Integration Item
      $ref: './catalog-integration/integrations/item.yaml#/get'
      tags:
        - Catalog Integration
    patch:
      summary: Update Catalog Integration
      $ref: './catalog-integration/integrations/item.yaml#/patch'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/brand-configs/{brandConfigUuid}':
    get:
      summary: Catalog integration configuration of a brand
      $ref: './catalog-integration/brand-configs/item.yaml#/get'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-exports/exports':
    get:
      summary: Read all catalog exports sorted by descending creation date
      $ref: './catalog-exports/exports/index.yaml#/get'
      tags:
        - Catalog Export

  '/api/internal/v1/catalog-exports':
    get:
      summary: Read all catalog exports sorted by descending creation date
      $ref: './catalog-exports/index.yaml#/get'
      tags:
        - Catalog Export

    post:
      summary: Create new catalog export related to authenticated brand
      $ref: './catalog-exports/exports/item.yaml#/post'
      tags:
        - Catalog Export

  '/api/internal/v1/catalog-exports/exports/{catalogExportUuid}':
    get:
      summary: Get Catalog Export
      $ref: './catalog-exports/exports/item.yaml#/get'
      tags:
        - Catalog Export

  '/api/internal/v1/catalog-integration/brand-configs/{brandConfigUuid}/spreadsheet':
    post:
      summary: Custom endpoint to generate empty spreadsheet for authenticated brand
      $ref: './catalog-integration/brand-configs/spreadsheets/item.yaml#/post'
      tags:
        - Catalog Integration
    delete:
      summary: Custom endpoint to delete spreadsheet related to authenticated brand
      $ref: './catalog-integration/brand-configs/spreadsheets/item.yaml#/delete'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/-actions/update-all':
    patch:
      summary: Update batch of integrations
      $ref: './catalog-integration/integrations/actions.yaml#/update-all'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/-actions/delete-many':
    delete:
      summary: Delete batch of integrations
      $ref: './catalog-integration/integrations/actions.yaml#/delete-many'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/-actions/statistics':
    get:
      summary: Number of imported integrations for authenticated brand
      $ref: './catalog-integration/integrations/actions.yaml#/statistics'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/-actions/approve-all':
    post:
      summary: Product Integrations bulk approval
      $ref: './catalog-integration/integrations/actions.yaml#/approve-all'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/-actions/approve-many':
    post:
      summary: Product Integrations bulk approval
      $ref: './catalog-integration/integrations/actions.yaml#/approve-many'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/integrations/-actions/purge':
    delete:
      summary: Purge integrations
      $ref: './catalog-integration/integrations/actions.yaml#/purge'
      tags:
        - Catalog Integration

  '/api/internal/v1/catalog-integration/product-integration-batches':
    get:
      summary: Read all batches sorted by ascending creation date
      $ref: './catalog-integration/product-integration-batches/index.yaml#/get'
      tags:
        - Catalog Integration

  '/api/internal/v1/offer-programmes/eligibles':
    get:
      summary: List Eligible Offer Programmes
      $ref: './offer-programmes/eligibles/index.yaml#/get'
      tags:
        - Offer Programme

  '/api/internal/v1/offer-programmes/{offerProgrammeId}':
    get:
      summary: List Eligible Offer Programmes
      $ref: './offer-programmes/item.yaml#/get'
      tags:
        - Offer Programme

  '/api/internal/v1/offer-programmes/{offerProgrammeId}/optins':
    post:
      summary: Opt-in on a Offer Programme
      $ref: './offer-programmes/item-optins.yaml#/post'
      tags:
        - Offer Programme

  '/api/internal/v1/offer-programmes/{offerProgrammeId}/optouts':
    post:
      summary: Opt-out on a Offer Programme
      $ref: './offer-programmes/item-optouts.yaml#/post'
      tags:
        - Offer Programme

  '/api/internal/v1/offer-programme/touch-points':
    get:
      $ref: ./offer-programmes/touch-points/index.yaml#/get

  '/api/internal/v1/platform/config':
    get:
      summary: Platform configuration details
      $ref: './platform/config.yaml#/get'
      tags:
        - Platform

  '/api/internal/v1/testimonials':
    get:
      summary: Testimonials
      $ref: './testimonials/index.yaml#/get'
      tags:
        - Testimonials

  '/api/internal/v1/categories':
    get:
      summary: List categories
      $ref: './categories/index.yaml#/get'
      tags:
        - Categories

  '/api/internal/v1/operations':
    post:
      summary: Bulk Operations
      $ref: './operations/index.yaml#/post'
      tags:
        - Bulk Operations

  '/api/internal/v1/segments':
    get:
      summary: List of current user segments
      $ref: ./segments/index.yaml#/get
      tags:
        - Segments

  '/api/internal/v1/analytics/brand-performance-metrics/dashboard':
    get:
      $ref: './analytics/brand-performance-metrics/dashboard.yaml#/get'

  '/api/internal/v1/business-event-brand-discounts':
    get:
      $ref: './business-event-brand-discounts/index.yaml#/get'

  '/api/internal/v1/product-prices':
    get:
      $ref: ./product-prices/index.yaml#/get

  '/api/internal/v1/shipping/labels':
    post:
      summary: Create a label
      $ref: ./shipping/labels/index.yaml#/post
      tags:
        - Shipping

components:
  parameters:
    acceptInHeader:
      name: Accept
      in: header
      description: application/vnd.api+json
      schema:
        type: string
        default: application/vnd.api+json
    uuidInPath:
      name: id
      in: path
      description: UUID of the requested resource
      schema:
        type: string
        format: uuid
      required: true
  schemas:
    failure:
      type: object
      additionalProperties: false
      properties:
        errors:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/error'
        jsonapi:
          $ref: '#/components/schemas/jsonapi'
      required:
        - errors
    meta:
      description: Non-standard meta-information that can not be represented as an attribute or relationship.
      type: object
      additionalProperties: true
    relationshipToOne:
      description: References to other resource objects in a to-one (`relationship`). Relationships can be specified by including a member in a resource's links object.
      $ref: '#/components/schemas/linkage'
    relationshipToMany:
      description: An array of objects each containing `type` and `id` members for to-many relationships.
      type: array
      items:
        $ref: '#/components/schemas/linkage'
      uniqueItems: true
    linkage:
      description: Resource identification present in Resource Objects and Resource Identifier Objects.
      type: object
      required:
        - id
        - type
      properties:
        id:
          $ref: '#/components/schemas/id'
        type:
          $ref: '#/components/schemas/type'
        meta:
          $ref: '#/components/schemas/meta'
      additionalProperties: false
    jsonapi:
      description: An object describing the server's implementation
      type: object
      properties:
        version:
          type: string
        meta:
          $ref: '#/components/schemas/meta'
      additionalProperties: false
    error:
      type: object
      properties:
        code:
          description: 'An application-specific error code, expressed as a string value.'
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
        status:
          description: 'The HTTP status code applicable to this problem, expressed as a string value.'
          type: string
        title:
          description: The HTTP status code description applicable to this problem
          type: string
        source:
          type: object
          description: Optional object pointing towards the problematic field
          properties:
            pointer:
              type: string
              description: The field key
      additionalProperties: false
    id:
      type: string
      description: '[resource object identifier (uuid)](https://jsonapi.org/format/#document-resource-object-identification)'
      format: uuid
    type:
      type: string
      description: '[resource object type](https://jsonapi.org/format/#document-resource-object-identification)'
    amount:
      type: object
      examples:
        example:
          currency: EUR
          amount: 142
      title: ''
      description: An object used to detail pricing information for various Resources.
      properties:
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
      required:
        - currency
        - amount
    currency:
      type: string
      description: ISO 3-Letter Currency Code
      examples:
        example: EUR
    money:
      type: integer
      description: Lowest denomination of the currency this amount belongs to.
    countryCode:
      type: string
      description: '[Short and unique alphanumeric codes to represent the relevant country](https://en.wikipedia.org/wiki/ISO_3166-2)'
      pattern: '^[A-Z]{2}$'
    MasterOrder:
      $ref: './ordering/components.yaml#/schemas/MasterOrder'
  securitySchemes:
    CookieKey:
      name: ankorstore_session
      type: apiKey
      in: cookie
  responses:
    BadRequest:
      description: Bad request
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Bad request
                status: '400'
    Unauthorized:
      description: Unauthorized
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Unauthorized
                status: '401'
    Forbidden:
      description: Forbidden
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Forbidden
                status: '403'
    NotFound:
      description: 'Not found'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Not found
                status: '404'
    UnprocessableEntity:
      description: 'Unprocessable Entity : Data provided is invalid'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: string
            errors:
              - detail: The field is required.
                source:
                  pointer: data.attributes.field
                status: '422'
                title: Unprocessable Content
    ServerError:
      description: 'Server Error'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Server Error
                status: '500'
    TooManyRequests:
      description: 'Too Many Requests: Rate limit exceeded'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Too Many Requests
                status: '429'
    Conflict:
      description: Conflict
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Conflict
                status: '409'
    NotAcceptable:
      description: Not Acceptable
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Not Acceptable
                status: '406'
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/failure'
          example:
            jsonapi:
              version: '1.0'
            errors:
              - detail: Unsupported Media Type
                status: '415'
